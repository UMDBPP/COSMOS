TITLE 'COSMOS Command and Telemetry Server'

#PACKET_LOG_WRITER DEFAULT meta_packet_log_writer.rb META DATA config/data/meta_init.txt
PACKET_LOG_WRITER COSMOSLOG packet_log_writer.rb cosmos

INTERFACE COSMOS_INT cmd_tlm_server_interface.rb
  TARGET COSMOS
  DISABLE_DISCONNECT
  LOG COSMOSLOG
  # DONT_LOG
  # DONT_CONNECT
  # DONT_RECONNECT
  # RECONNECT_DELAY 15.0
  # LOG_RAW

#         int_name file_name           write       read      baud   parity stop timeouts
INTERFACE CFS_INT  serial_interface.rb /dev/ttyS3 /dev/ttyS3 115200 NONE   1    nil nil  
# Length protocol will identify packets based on length and fill the packet's length field
# Length Arguments:                       len_loc, len_len, len_offset, bytepercnt, endian, discard sync, sync,    max_len, fill_len
  PROTOCOL READ_WRITE length_protocol.rb  32        16      7            1       BIG_ENDIAN  0            nil      nil      true 
# CCSDS protocol fills the Link command's checksum
# CCSDS Arguments:                  crc_field_name
  PROTOCOL WRITE ccsds_protocol.rb "CHECKSUM"
# SeqCnt protocol fills the Link command's sequence counter
# SeqCnt Arguments:                  seqcnt_field_name
  PROTOCOL WRITE seqcnt_protocol.rb "CCSDSSEQCNT"                   
  #TARGET CFE_ES
  #TARGET CFE_EVS
  #TARGET CFE_SB
  #TARGET CFE_TBL
  #TARGET CFE_TIME
  #TARGET CFS_CS
  #TARGET CFS_DS
  #TARGET CFS_FM
  #TARGET CFS_HK
  #TARGET CFS_HS
  #TARGET CFS_LC
  #TARGET CFS_MD
  #TARGET CFS_MM
  #TARGET CFS_SC
  #TARGET CFS_SCH
  #TARGET CFS_TO
  #TARGET CFS_CI
  #TARGET BMP280

# LINKCCSDS_INT is designed to talk to payloads through the LINK message routing.

#         int_name       file_name           write read baud   parity stop timeouts
INTERFACE LINKCCSDS_INT  serial_interface.rb COM5 COM5 57600   NONE   1    nil nil 


# XOR checksum protocol fills the Link command's checksum
  PROTOCOL WRITE xor_checksum_protocol_raw.rb
# SeqCnt protocol fills the Link command's sequence counter
  PROTOCOL WRITE seqcnt_protocol_raw.rb
# Link protocol wraps the command in a Link command to forward the packet
# Link Arguments:                 apidFileName
  PROTOCOL WRITE link_protocol.rb "APIDs.json"
# Length protocol will fill the packet's length field
# XOR checksum protocol fills the forwarded command's checksum  
  PROTOCOL WRITE xor_checksum_protocol.rb
# SeqCnt protocol fills the forwarded command's sequence counter
  PROTOCOL WRITE seqcnt_protocol.rb
# Length Arguments:                       len_loc, len_len, len_offset, bytepercnt, endian, discard sync, sync,    max_len, fill_len
  PROTOCOL READ_WRITE length_protocol.rb  32        16      7            1       BIG_ENDIAN  0            nil       nil     true 

  #TARGET SCORCH
  TARGET LINK  
  #TARGET CAMERA
  TARGET MARS1
  TARGET MARS2
  TARGET HELIOS
  #TARGET RFD900
  #DONT_CONNECT
  
# RFD900_INT is designed to talk to payloads through the LINK message routing.
# This iterface performs the same actions as the CCSDS_INT for the outgoing packets. 
#
# The interface will also automatically wrap any non-LINK message sent through it (as identified by the APIDs
# of the message not being in the range assigned to LINK in APIDs.txt) with a LINK XB_FSWMSG command header
# and a destination xbee address (as defined in APIDs.txt) so that LINK will forward the message to the 
# proper payload. 

#         interface name  file name              write read baud   parity stop timeouts stream      write_term read_term
INTERFACE RFD900_INT      serial_interface.rb    COM1  COM1 57600  NONE   1    nil nil  
  PROTOCOL READ_WRITE terminated_protocol  0x0000 0x0D0A true  0 nil false
  PROTOCOL READ_WRITE rfd900_protocol 
  #TARGET RFD900
  DONT_CONNECT
  
  
# XBEE_INT is designed to talk directly to an Xbee unit.
# For Xbee packets (identified by the start bytes '0x7E') this interface will calculate the length and checksum 
# fields of any message sent through it and will override those fields of the XBee header.
#
# The interface will also wrap any non-XBee message sent through it (as identified by the lack of start bytes)
# with a Xbee header which will result in the message being sent to the proper address (as defined in APIDs.txt). 

#         interface name  file name              write read baud   parity stop timeouts
INTERFACE XBEE_INT  serial_interface.rb      COM3  COM3 9600   NONE   1    nil nil  
# Length protocol will fill the packet's length field
# Length Arguments:                       len_loc, len_len, len_offset, bytepercnt, endian, discard sync, sync,    max_len, fill_len
  PROTOCOL READ_WRITE length_protocol.rb  32        16      7            1       BIG_ENDIAN  0            nil       nil     true 
# CCSDS protocol fills the command's checksum  
# CCSDS Arguments: N/A
  PROTOCOL WRITE ccsds_protocol  
# Xbee protocol wraps the packet in an Xbee header
# Xbee Arguments: N/A
  PROTOCOL WRITE xbee_protocol 
  #TARGET XBEE
  #TARGET SCORCH
  #TARGET LINK  
  DONT_CONNECT
 
#INTERFACE_TARGET SIM_SCORCH cmd_tlm_server.txt # Use cmd_tlm_server.txt in target package 
#  DONT_CONNECT
  
ROUTER INST_ROUTER tcpip_server_interface.rb 2055 2055 10.0 nil LENGTH 32 16 7
  OPTION LISTEN_ADDRESS 127.0.0.1
#  ROUTE INST_INT
  # DONT_CONNECT
  # DONT_RECONNECT
  # DISABLE_DISCONNECT
  # RECONNECT_DELAY 15.0
  # LOG_RAW

# BACKGROUND_TASK example_background_task.rb

# AUTO_INTERFACE_TARGETS # Use cmd_tlm_server.txt from all targets declared in system.txt

#NTERFACE_TARGET INST cmd_tlm_server.txt # Use cmd_tlm_server.txt in target package

#INTERFACE INST2_INT simulated_target_interface.rb sim_inst.rb
#  TARGET INST2
#  DONT_LOG

#INTERFACE_TARGET EXAMPLE cmd_tlm_server.txt # Use cmd_tlm_server.txt in target package

#INTERFACE_TARGET TEMPLATED cmd_tlm_server.txt # Use cmd_tlm_server.txt in target package

#COLLECT_METADATA META DATA


